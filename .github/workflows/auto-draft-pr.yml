name: Auto Create Draft PR

on:
  push:
    branches-ignore:
      - main
      - dev
  pull_request:
    types: [closed]
    branches: [dev]

# Grant necessary permissions for creating PRs and comments
permissions:
  contents: read         # Required to read repository content
  pull-requests: write   # Required to create pull requests
  issues: write         # Required to create comments

jobs:
  determine-pr-type:
    name: Determine PR Type
    runs-on: ubuntu-latest
    outputs:
      should-create-pr: ${{ steps.determine.outputs.should-create-pr }}
      pr-type: ${{ steps.determine.outputs.pr-type }}
      source-branch: ${{ steps.determine.outputs.source-branch }}
      target-branch: ${{ steps.determine.outputs.target-branch }}
      trigger-info: ${{ steps.determine.outputs.trigger-info }}
    steps:
      - name: Determine PR requirements
        id: determine
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Feature branch push - create PR to dev
            branch_name="${{ github.ref_name }}"
            echo "should-create-pr=true" >> $GITHUB_OUTPUT
            echo "pr-type=feature" >> $GITHUB_OUTPUT
            echo "source-branch=$branch_name" >> $GITHUB_OUTPUT
            echo "target-branch=dev" >> $GITHUB_OUTPUT
            echo "trigger-info=push to $branch_name" >> $GITHUB_OUTPUT
            echo "üîÑ Feature branch push detected: $branch_name ‚Üí dev"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" && "${{ github.event.pull_request.base.ref }}" == "dev" ]]; then
            # PR merged to dev - create PR to main
            echo "should-create-pr=true" >> $GITHUB_OUTPUT
            echo "pr-type=release" >> $GITHUB_OUTPUT
            echo "source-branch=dev" >> $GITHUB_OUTPUT
            echo "target-branch=main" >> $GITHUB_OUTPUT
            echo "trigger-info=PR #${{ github.event.pull_request.number }} merged to dev" >> $GITHUB_OUTPUT
            echo "üöÄ Release PR needed: dev ‚Üí main (triggered by PR #${{ github.event.pull_request.number }})"
          else
            echo "should-create-pr=false" >> $GITHUB_OUTPUT
            echo "‚ùå No PR creation needed for this event"
          fi

  create-draft-pr:
    name: Create Draft PR
    runs-on: ubuntu-latest
    needs: determine-pr-type
    if: needs.determine-pr-type.outputs.should-create-pr == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-pr-type.outputs.source-branch }}
          fetch-depth: 0

      - name: Check for existing PR
        id: check-pr
        uses: actions/github-script@v7
        env:
          SOURCE_BRANCH: ${{ needs.determine-pr-type.outputs.source-branch }}
          TARGET_BRANCH: ${{ needs.determine-pr-type.outputs.target-branch }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const sourceBranch = process.env.SOURCE_BRANCH;
            const targetBranch = process.env.TARGET_BRANCH;
            
            console.log(`üîç Checking for existing PR: ${sourceBranch} ‚Üí ${targetBranch}`);
            
            try {
              const { data: pulls } = await github.rest.pulls.list({
                owner,
                repo,
                head: owner + ':' + sourceBranch,
                base: targetBranch,
                state: 'open'
              });
              
              if (pulls.length > 0) {
                console.log(`‚úÖ Found existing PR: #${pulls[0].number}`);
                core.setOutput('has_pr', 'true');
                core.setOutput('pr_number', pulls[0].number);
                core.setOutput('pr_title', pulls[0].title);
              } else {
                console.log('‚ùå No existing PR found');
                core.setOutput('has_pr', 'false');
              }
            } catch (error) {
              console.error('Error checking for PRs: ' + error.message);
              core.setOutput('has_pr', 'false');
            }

      - name: Generate PR content
        id: generate-content
        if: needs.determine-pr-type.outputs.should-create-pr == 'true' && steps.check-pr.outputs.has_pr == 'false'
        uses: actions/github-script@v7
        env:
          PR_TYPE: ${{ needs.determine-pr-type.outputs.pr-type }}
          SOURCE_BRANCH: ${{ needs.determine-pr-type.outputs.source-branch }}
          TARGET_BRANCH: ${{ needs.determine-pr-type.outputs.target-branch }}
          TRIGGER_INFO: ${{ needs.determine-pr-type.outputs.trigger-info }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const prType = process.env.PR_TYPE;
            const sourceBranch = process.env.SOURCE_BRANCH;
            const targetBranch = process.env.TARGET_BRANCH;
            const triggerInfo = process.env.TRIGGER_INFO;
            
            let title, body, commentBody;
            
            if (prType === 'feature') {
              // Feature branch PR content
              const { data: commit } = await github.rest.repos.getCommit({
                owner,
                repo,
                ref: context.sha
              });
              
              const commitMessage = commit.commit.message;
              const firstLine = commitMessage.split('\n')[0];
              
              let result = '';
              for (let i = 0; i < sourceBranch.length; i++) {
                const char = sourceBranch[i];
                if ((char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') || (char >= '0' && char <= '9')) {
                  // Letter or number: keep as-is
                  result += char;
                } else if (char === '/') {
                  // Slash: becomes " - "
                  result += ' - ';
                } else {
                  // Everything else: becomes space
                  result += ' ';
                }
              }
              
              // Clean up multiple spaces and capitalize
              const branchTitle = result
                .replace(/\s+/g, ' ')                   // multiple spaces become single space
                .trim()                                 // remove leading/trailing spaces
                .replace(/\b\w/g, l => l.toUpperCase()); // capitalize first letter of each word
              
              title = firstLine.length > 50 ? branchTitle : branchTitle + ': ' + firstLine;
              
              body = `Auto-created draft PR from \`${sourceBranch}\` ‚Üí \`${targetBranch}\``;
              
              commentBody = "**Next steps:**\n" +
                "1. Update description\n" +
                "2. Mark ready for review when complete";
            
            } else if (prType === 'release') {
              // Enhanced Release PR content - Full sync from dev to main
              console.log('üîÑ Generating full sync PR content for dev ‚Üí main');
              
              const { data: comparison } = await github.rest.repos.compareCommits({
                owner,
                repo,
                base: targetBranch,
                head: sourceBranch
              });
              
              const commitCount = comparison.commits.length;
              
                             // Safety check - prevent unnecessary PRs and warn about large syncs
               if (commitCount === 0) {
                 console.log('‚úÖ Branches are already in sync - no PR needed');
                 core.setOutput('skip_pr', 'true');
                 return;
               } else if (commitCount > 50) {
                 console.log(`‚ö†Ô∏è Warning: Large sync detected (${commitCount} commits) - this indicates significant accumulated changes`);
               } else {
                 console.log(`‚úÖ Found ${commitCount} commit${commitCount === 1 ? '' : 's'} to sync from dev to main`);
               }
              
              // Analyze commits by type
              const commitAnalysis = {
                features: [],
                fixes: [],
                conflicts: [],
                deployments: [],
                other: []
              };
              
              comparison.commits.forEach(commit => {
                const message = commit.commit.message.toLowerCase();
                if (message.includes('resolve') && (message.includes('conflict') || message.includes('merge'))) {
                  commitAnalysis.conflicts.push(commit);
                } else if (message.includes('fix') || message.includes('bug')) {
                  commitAnalysis.fixes.push(commit);
                } else if (message.includes('feature') || message.includes('add') || message.includes('implement')) {
                  commitAnalysis.features.push(commit);
                } else if (message.includes('deploy') || message.includes('production')) {
                  commitAnalysis.deployments.push(commit);
                } else {
                  commitAnalysis.other.push(commit);
                }
              });
              
              // Generate title and content
              title = `Production Deployment (${commitCount} ${commitCount === 1 ? 'commit' : 'commits'})`;
              
              body = `Auto-created release PR: \`${sourceBranch}\` ‚Üí \`${targetBranch}\`\n\nSyncs ${commitCount} commit${commitCount === 1 ? '' : 's'} from dev to main for production deployment.`;
              
              commentBody = `Ready for production deployment\n\n` +
                           `Review changes and mark ready for review when safe to deploy.`;
            }
            
            core.setOutput('title', title);
            core.setOutput('body', body);
            core.setOutput('comment_body', commentBody);

      - name: Create PR
        if: needs.determine-pr-type.outputs.should-create-pr == 'true' && steps.check-pr.outputs.has_pr == 'false' && steps.generate-content.outputs.skip_pr != 'true'
        uses: actions/github-script@v7
        env:
          SOURCE_BRANCH: ${{ needs.determine-pr-type.outputs.source-branch }}
          TARGET_BRANCH: ${{ needs.determine-pr-type.outputs.target-branch }}
          PR_TITLE: ${{ steps.generate-content.outputs.title }}
          PR_BODY: ${{ steps.generate-content.outputs.body }}
          PR_COMMENT_BODY: ${{ steps.generate-content.outputs.comment_body }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const sourceBranch = process.env.SOURCE_BRANCH;
            const targetBranch = process.env.TARGET_BRANCH;
            
            const title = process.env.PR_TITLE;
            const body = process.env.PR_BODY;
            const commentBody = process.env.PR_COMMENT_BODY;
            
            console.log(`üöÄ Creating draft PR: ${sourceBranch} ‚Üí ${targetBranch}`);
            
            try {
              const { data: pr } = await github.rest.pulls.create({
                owner,
                repo,
                title,
                head: sourceBranch,
                base: targetBranch,
                body,
                draft: true
              });
              
              console.log(`‚úÖ Created draft PR #${pr.number}: ${title}`);
              
              // Add initial comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr.number,
                body: commentBody
              });
              
            } catch (error) {
              console.error('‚ùå Failed to create PR: ' + error.message);
              
              if (error.message.includes('No commits between')) {
                console.log(`‚ÑπÔ∏è ${sourceBranch} has no new commits compared to ${targetBranch}`);
              } else {
                throw error;
              }
            }

      - name: Update existing PR
        if: needs.determine-pr-type.outputs.should-create-pr == 'true' && steps.check-pr.outputs.has_pr == 'true'
        uses: actions/github-script@v7
        env:
          SOURCE_BRANCH: ${{ needs.determine-pr-type.outputs.source-branch }}
          TARGET_BRANCH: ${{ needs.determine-pr-type.outputs.target-branch }}
          PR_NUMBER: ${{ steps.check-pr.outputs.pr_number }}
          PR_TYPE: ${{ needs.determine-pr-type.outputs.pr-type }}
          TRIGGER_INFO: ${{ needs.determine-pr-type.outputs.trigger-info }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const sourceBranch = process.env.SOURCE_BRANCH;
            const targetBranch = process.env.TARGET_BRANCH;
            const prNumber = parseInt(process.env.PR_NUMBER);
            const prType = process.env.PR_TYPE;
            const triggerInfo = process.env.TRIGGER_INFO;
            
            console.log(`üîÑ Updating existing PR #${prNumber} with fresh statistics`);
            
            // Generate updated content based on PR type
            let updatedTitle, updatedBody;
            
            if (prType === 'feature') {
              // Feature branch PR - just get latest commit message
              const { data: commit } = await github.rest.repos.getCommit({
                owner,
                repo,
                ref: context.sha
              });
              
              const commitMessage = commit.commit.message;
              const firstLine = commitMessage.split('\n')[0];
              
              let result = '';
              for (let i = 0; i < sourceBranch.length; i++) {
                const char = sourceBranch[i];
                if ((char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') || (char >= '0' && char <= '9')) {
                  result += char;
                } else if (char === '/') {
                  result += ' - ';
                } else {
                  result += ' ';
                }
              }
              
              const branchTitle = result
                .replace(/\s+/g, ' ')
                .trim()
                .replace(/\b\w/g, l => l.toUpperCase());
              
              updatedTitle = firstLine.length > 50 ? branchTitle : branchTitle + ': ' + firstLine;
              updatedBody = `Auto-created draft PR from \`${sourceBranch}\` ‚Üí \`${targetBranch}\`\n\n` +
                          `**Last updated**: ${new Date().toISOString().split('T')[0]} after new commits`;
              
            } else if (prType === 'release') {
              // Release PR - regenerate full statistics
              const { data: comparison } = await github.rest.repos.compareCommits({
                owner,
                repo,
                base: targetBranch,
                head: sourceBranch
              });
              
              const commitCount = comparison.commits.length;
              console.log(`üìä Updated statistics: ${commitCount} commits found`);
              
              if (commitCount === 0) {
                console.log('‚úÖ Branches are now in sync - no updates needed');
                return;
              }
              
              // Generate updated title and body
              updatedTitle = `Production Deployment (${commitCount} ${commitCount === 1 ? 'commit' : 'commits'})`;
              
              updatedBody = `Auto-created release PR: \`${sourceBranch}\` ‚Üí \`${targetBranch}\`\n\n` +
                           `Syncs ${commitCount} commit${commitCount === 1 ? '' : 's'} from dev to main for production deployment.\n\n` +
                           `**Last updated**: ${new Date().toISOString().split('T')[0]}`;
            }
            
                         // Update the PR title and body
             try {
               await github.rest.pulls.update({
                 owner,
                 repo,
                 pull_number: prNumber,
                 title: updatedTitle,
                 body: updatedBody
               });
               
               console.log(`‚úÖ Updated PR #${prNumber} with fresh statistics`);
               
             } catch (error) {
               console.error('‚ùå Failed to update PR: ' + error.message);
               throw error;
             }

      - name: Summary
        if: needs.determine-pr-type.outputs.should-create-pr == 'true'
        env:
          PR_TYPE: ${{ needs.determine-pr-type.outputs.pr-type }}
          SOURCE_BRANCH: ${{ needs.determine-pr-type.outputs.source-branch }}
          TARGET_BRANCH: ${{ needs.determine-pr-type.outputs.target-branch }}
          TRIGGER_INFO: ${{ needs.determine-pr-type.outputs.trigger-info }}
          HAS_PR: ${{ steps.check-pr.outputs.has_pr }}
          PR_NUMBER: ${{ steps.check-pr.outputs.pr_number }}
          SKIP_PR: ${{ steps.generate-content.outputs.skip_pr }}
        run: |
          echo "üéâ Auto-draft PR workflow completed!"
          echo "PR Type: $PR_TYPE"
          echo "Direction: $SOURCE_BRANCH ‚Üí $TARGET_BRANCH"
          echo "Trigger: $TRIGGER_INFO"
          if [[ "$SKIP_PR" == "true" ]]; then
            echo "Action: Skipped (branches already in sync)"
          elif [[ "$HAS_PR" == "true" ]]; then
            echo "Action: Updated existing PR #$PR_NUMBER with fresh statistics"
          else
            echo "Action: Created new draft PR with full sync"
          fi 